image: registry.gitlab.com/attu/cxx

stages:
- build
- sanitize
- benchmark
- post

.template: &gcc
  variables:
    CXX: g++

.template: &clang
  variables:
    CXX: clang++

.template: &libcxx
  variables:
    CXXFLAGS: -stdlib=libc++
    CXX: clang++
    LINKFLAGS: -stdlib=libc++

.template: &debug
  before_script:
  - source ./config/debug.sh

.template: &release
  before_script:
  - source ./config/release.sh

.template: &sanitize
  stage: sanitize
  before_script:
  - source ./config/sanitize.sh

.template: &benchmark
  stage: benchmark
  before_script:
  - source ./config/release.sh
  after_script:
  - ./waf benchmark

.template: &coverage
  stage: post
  before_script:
  - source ./config/coverage.sh
  after_script:
  - >-
     gcovr
     --root=build
     --filter='.*cxx.*'
     --filter='.*src.*'
     --fail-under-line=100
  - >-
     gcovr
     --branch
     --root=build
     --filter='.*cxx.*'
     --filter='.*src.*'
     --print-summary

.template: &build
  script:
  - ./waf configure --prefix=usr build install --destdir=/

gcc:debug:
  stage: build
  <<: *gcc
  <<: *debug
  <<: *build

gcc:release:
  stage: build
  <<: *gcc
  <<: *release
  <<: *build

clang:libstdc++:debug:
  stage: build
  <<: *clang
  <<: *debug
  <<: *build

clang:libstdc++:release:
  stage: build
  <<: *clang
  <<: *release
  <<: *build

clang:libcxx:debug:
  stage: build
  <<: *libcxx
  <<: *debug
  <<: *build

clang:libcxx:release:
  stage: build
  <<: *libcxx
  <<: *release
  <<: *build

gcc:sanitize:
  <<: *gcc
  <<: *sanitize
  <<: *build

clang:libstdc++:sanitize:
  <<: *clang
  <<: *sanitize
  <<: *build

clang:libcxx:sanitize:
  <<: *libcxx
  <<: *sanitize
  <<: *build

gcc:benchmark:
  <<: *gcc
  <<: *benchmark
  <<: *build

clang:libstdc++:benchmark:
  <<: *clang
  <<: *benchmark
  <<: *build

gcc:coverage:
  <<: *gcc
  <<: *coverage
  <<: *build

clang:fuzzer:
  stage: post
  <<: *clang
  <<: *release
  script:
    - ./waf configure fuzzer
